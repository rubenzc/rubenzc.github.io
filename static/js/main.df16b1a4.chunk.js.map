{"version":3,"sources":["components/Header.js","components/Form.js","components/Error.js","components/Weather.js","App.js","serviceWorker.js","index.js"],"names":["Header","props","react_default","a","createElement","className","title","Form","cityRef","React","createRef","countryRef","answerSearch","e","preventDefault","answer","city","_this","current","value","country","dataSearch","currentTarget","reset","onSubmit","this","ref","id","type","htmlFor","defaultValue","Component","Error","message","Weather","showResult","_this$props$result","result","name","weather","main","urlIcon","concat","icon","alt","temp","toFixed","src","temp_max","temp_min","console","log","App","state","error","request","checkApi","_this$state$request","url","fetch","then","json","data","setState","catch","prevProps","prevState","cod","components_Error","components_Weather","components_Header","components_Form","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"oMAkBeA,EAfA,SAACC,GACZ,OACIC,EAAAC,EAAAC,cAAA,WACGF,EAAAC,EAAAC,cAAA,WACKF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mCACXH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,cAAcJ,EAAMK,WCsDtCC,6MAxDXC,QAAUC,IAAMC,cAChBC,WAAaF,IAAMC,cAEnBE,aAAe,SAACC,GACZA,EAAEC,iBAGF,IAAMC,EAAS,CACXC,KAAMC,EAAKT,QAAQU,QAAQC,MAC3BC,QAASH,EAAKN,WAAWO,QAAQC,OAGrCF,EAAKhB,MAAMoB,WAAWN,GAG1BF,EAAES,cAAcC,iFAIZ,OACIrB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACXH,EAAAC,EAAAC,cAAA,QAAMoB,SAAUC,KAAKb,cACjBV,EAAAC,EAAAC,cAAA,OAAKC,UAAU,uCACXH,EAAAC,EAAAC,cAAA,SAAOsB,IAAKD,KAAKjB,QAASmB,GAAG,OAAOC,KAAK,SACzC1B,EAAAC,EAAAC,cAAA,SAAOyB,QAAQ,QAAf,UAEJ3B,EAAAC,EAAAC,cAAA,OAAKC,UAAU,uCACXH,EAAAC,EAAAC,cAAA,UAAQsB,IAAKD,KAAKd,YACdT,EAAAC,EAAAC,cAAA,UAAQe,MAAM,GAAGW,cAAY,GAA7B,qBACA5B,EAAAC,EAAAC,cAAA,UAAQe,MAAM,MAAd,aACAjB,EAAAC,EAAAC,cAAA,UAAQe,MAAM,MAAd,YACAjB,EAAAC,EAAAC,cAAA,UAAQe,MAAM,MAAd,cACAjB,EAAAC,EAAAC,cAAA,UAAQe,MAAM,MAAd,aACAjB,EAAAC,EAAAC,cAAA,UAAQe,MAAM,MAAd,iBACAjB,EAAAC,EAAAC,cAAA,UAAQe,MAAM,MAAd,aACAjB,EAAAC,EAAAC,cAAA,UAAQe,MAAM,MAAd,YAEJjB,EAAAC,EAAAC,cAAA,SAAOyB,QAAQ,WAAf,aAEJ3B,EAAAC,EAAAC,cAAA,OAAKC,UAAU,sCACXH,EAAAC,EAAAC,cAAA,SAAOwB,KAAK,SAASvB,UAAU,qDAAqDc,MAAM,0BA7CvGY,aCiBJC,EAjBD,SAAC/B,GACX,OACIC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,wBACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iCACVJ,EAAMgC,aCyChBC,6MA7CXC,WAAa,WAAM,IAAAC,EAGenB,EAAKhB,MAAMoC,OAAlCC,EAHQF,EAGRE,KAAMC,EAHEH,EAGFG,QAASC,EAHPJ,EAGOI,KAEtB,IAAIF,IAASC,IAAYC,EAAM,OAAO,KAEtC,IACMC,EAAO,oCAAAC,OAAuCH,EAAQ,GAAGI,KAAlD,QACPC,EAAG,GAAAF,OAAMJ,EAAN,YACT,OACIpC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,+CACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,sCACXH,EAAAC,EAAAC,cAAA,QAAMC,UAAU,cACZH,EAAAC,EAAAC,cAAA,yBAAiBkC,GACjBpC,EAAAC,EAAAC,cAAA,KAAGC,UAAU,eAAb,SACYmC,EAAKK,KAVtB,QAUqCC,QAAQ,GADxC,QAEI5C,EAAAC,EAAAC,cAAA,OAAK2C,IAAKN,EAASG,IAAKA,KAE5B1C,EAAAC,EAAAC,cAAA,kBAAWoC,EAAKQ,SAbrB,QAawCF,QAAQ,GAA3C,SACA5C,EAAAC,EAAAC,cAAA,kBAAWoC,EAAKS,SAdrB,QAcwCH,QAAQ,GAA3C,sFAYpB,OADAI,QAAQC,IAAI1B,KAAKxB,MAAMoC,QAEnBnC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACVoB,KAAKU,qBArCAJ,aC8FPqB,6MAzFbC,MAAQ,CACNC,MAAO,GACPC,QAAS,GACTlB,OAAQ,MAeVmB,SAAW,WAAM,IAAAC,EACSxC,EAAKoC,MAAME,QAA5BvC,EADQyC,EACRzC,KAAMI,EADEqC,EACFrC,QAEb,IAAIJ,IAASI,EAAS,OAAO,KAG7B,IACIsC,EAAG,qDAAAhB,OAAwD1B,EAAxD,KAAA0B,OAAgEtB,EAAhE,WAAAsB,OADO,oCAKdiB,MAAOD,GACJE,KAAK,SAAA7C,GACJ,OAAOA,EAAO8C,SAEfD,KAAM,SAAAE,GACL7C,EAAK8C,SAAS,CACZ1B,OAAQyB,MAGXE,MAAM,SAAAV,GACLJ,QAAQC,IAAIG,QAIlBjC,WAAa,SAAAN,GAEQ,KAAhBA,EAAOC,MAAkC,KAAnBD,EAAOK,QAC9BH,EAAK8C,SAAS,CACZT,OAAO,IAGTrC,EAAK8C,SAAS,CACZR,QAASxC,EACTuC,OAAO,uFA9CMW,EAAWC,GACzBA,EAAUX,UAAY9B,KAAK4B,MAAME,SACpC9B,KAAK+B,uDAKL/B,KAAKsC,SAAS,CACZT,OAAO,qCA8CH,IAGFjB,EAHEiB,EAAQ7B,KAAK4B,MAAMC,MAClBa,EAAO1C,KAAK4B,MAAMhB,OAAlB8B,IAcP,OATE9B,EADCiB,EACQpD,EAAAC,EAAAC,cAACgE,EAAD,CAAOnC,QAAQ,8BACP,QAARkC,EACAjE,EAAAC,EAAAC,cAACgE,EAAD,CAAOnC,QAAQ,mBAIf/B,EAAAC,EAAAC,cAACiE,EAAD,CAAShC,OAAUZ,KAAK4B,MAAMhB,SAIvCnC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAACkE,EAAD,CACEhE,MAAQ,kBAEVJ,EAAAC,EAAAC,cAACmE,EAAD,CACElD,WAAcI,KAAKJ,aAEpBgB,UArFSN,aCMEyC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO5E,EAAAC,EAAAC,cAAC2E,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMxB,KAAK,SAAAyB,GACjCA,EAAaC","file":"static/js/main.df16b1a4.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst Header = (props) => {\n    return (\n        <div>\n           <nav>\n                <div className=\"nav-wrapper light-blue darken-2\">\n                    <p className=\"brand-logo\">{props.title}</p>\n                </div>\n            </nav> \n        </div>\n    );\n};\n\nHeader.propTypes = {\n    title: PropTypes.string.isRequired\n}\nexport default Header;","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nclass Form extends Component {\n    \n    //Create refs\n    cityRef = React.createRef();\n    countryRef = React.createRef();\n\n    answerSearch = (e) => {\n        e.preventDefault();\n\n        //Read refs and create the object\n        const answer = {\n            city: this.cityRef.current.value,\n            country: this.countryRef.current.value\n        }\n    //Send the props\n        this.props.dataSearch(answer);\n\n    //Reset\n    e.currentTarget.reset();\n    }\n\n    render() { \n        return (\n            <div className=\"contenedor-form\">\n                <div className=\"container\">\n                    <div className=\"row\">\n                        <form onSubmit={this.answerSearch}>\n                            <div className=\"input-field col s12 m8 l4 offset-m2\">\n                                <input ref={this.cityRef} id=\"city\" type=\"text\" />\n                                <label htmlFor=\"city\">City:</label>\n                            </div>\n                            <div className=\"input-field col s12 m8 l4 offset-m2\">\n                                <select ref={this.countryRef}>\n                                    <option value=\"\" defaultValue>Choose a country:</option>\n                                    <option value=\"AR\">Argentina</option>\n                                    <option value=\"CO\">Colombia</option>\n                                    <option value=\"CR\">Costa Rica</option>\n                                    <option value=\"ES\">España</option>\n                                    <option value=\"US\">Estado Unidos</option>\n                                    <option value=\"MX\">México</option>\n                                    <option value=\"PE\">Perú</option>\n                                </select>\n                                <label htmlFor=\"country\">Country:</label>\n                            </div>\n                            <div className=\"input-field col s12 m8 l4 offset-2\">\n                                <input type=\"submit\" className=\"waves-effect waves-light btn-large yellow-accent-4\" value=\"Search...\" />\n                            </div>\n                        </form>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nForm.propTypes = {\n    dataSearch: PropTypes.func.isRequired\n}\n \nexport default Form;","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst Error = (props) => {\n    return (\n        <div className=\"container\">\n            <div className=\"row\">\n                <div className=\"col s12 m6 offset-m3\">\n                    <div className=\"card-panel red darken-4 error\">\n                        {props.message}\n                    </div>\n                </div>\n            </div>\n        </div>\n    );\n}\nError.propTypes = {\n    message: PropTypes.string.isRequired\n}\n \nexport default Error;","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nclass Weather extends Component {\n\n    showResult = () => {\n\n        //Get request data\n        const {name, weather, main} = this.props.result;\n\n        if(!name || !weather || !main) return null;\n\n        const kelvin = 273.15;\n        const urlIcon = `https://openweathermap.org/img/w/${weather[0].icon}.png`;\n        const alt = `${name} Weather`;\n        return(\n            <div className=\"row\">\n                <div className=\"resultado col s12 m8 l6 offset-m2 offset-l3\">\n                    <div className=\"card-panel light-blue align-center\">\n                        <span className=\"white-text\">\n                            <h2> Weather in {name}</h2>\n                            <p className=\"temperatura\">\n                                Now: { (main.temp - kelvin).toFixed(1) }&deg;C\n                                <img src={urlIcon} alt={alt} />\n                            </p>\n                            <p>Max. { (main.temp_max - kelvin).toFixed(1) }&deg;C</p>\n                            <p>Min. { (main.temp_min - kelvin).toFixed(1) }&deg;C</p>\n                        </span>\n\n                    </div>\n                </div>\n            </div>\n        )\n\n    }\n\n    render() { \n        console.log(this.props.result);\n        return (\n            <div className=\"container\">\n               { this.showResult() } \n            </div>\n        );\n    }\n}\n\nWeather.propTypes = {\n    result : PropTypes.object.isRequired\n}\n \nexport default Weather;","import React, { Component } from 'react';\nimport Header from './components/Header';\nimport Form from './components/Form';\nimport Error from './components/Error';\nimport Weather from './components/Weather';\n\nclass App extends Component {\n\n  state = {\n    error: '',\n    request: {},\n    result: {}\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if(prevState.request !== this.state.request) {\n    this.checkApi();\n    }\n  }\n\n  componentDidMount(){\n    this.setState({\n      error: false\n    })\n  }\n\n  checkApi = () => {\n    const {city, country} = this.state.request;\n\n    if(!city || !country) return null;\n\n    //Read url & add api key\n    const appId = '5691cb67d4449d4a2bebe46f2d82c7e4';\n    let url = `https://api.openweathermap.org/data/2.5/weather?q=${city},${country}&appid=${appId}`;\n\n\n    //query with fetch api\n    fetch (url)\n      .then(answer => {\n        return answer.json();\n      })\n      .then( data => {\n        this.setState({\n          result: data\n        })\n      })\n      .catch(error => {\n        console.log(error);\n      })\n}\n\n  dataSearch = answer =>{\n    \n    if(answer.city === '' || answer.country === ''){\n      this.setState({\n        error: true\n      })\n    } else {\n      this.setState({\n        request: answer,\n        error: false\n      })\n    }\n      \n  }\n\n  render() {\n\n    const error = this.state.error,\n          {cod} = this.state.result;\n\n    let result;\n\n    if(error){\n      result = <Error message=\"The fields can't be empty\"/>\n    } else if (cod === \"404\") {\n      result = <Error message=\"City not found\"/>\n    }\n    \n    else {\n      result = <Weather result = {this.state.result} />\n    }\n\n    return (\n      <div className=\"app\">\n        <Header\n          title = 'React weather'\n        />\n        <Form\n          dataSearch = {this.dataSearch}\n        />\n        {result}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './css/index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}